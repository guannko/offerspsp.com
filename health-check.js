#!/usr/bin/env node

/**
 * SUPER SYSTEM HEALTH CHECK
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  maxSizeKB: {
    eyes: 500,      // offerspsp.com –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < 500KB
    hemisphere: 5000 // –ø–æ–ª—É—à–∞—Ä–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ
  },
  criticalFiles: [
    '/workspace/BRAIN-INDEX.md',
    '/workspace/CURRENT-STATE.md',
    '/workspace/userPreferences-STABLE.md'
  ],
  hemispheres: {
    left: '/workspace/Annoris/hemisphere-status.json',
    right: '/workspace/offerspsp-mvp/hemisphere-status.json'
  }
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m'
};

// –ö–ª–∞—Å—Å –¥–ª—è health check
class SystemHealthCheck {
  constructor() {
    this.results = {
      timestamp: new Date().toISOString(),
      overall: 'HEALTHY',
      checks: [],
      warnings: [],
      errors: []
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  getDirectorySize(dirPath) {
    let totalSize = 0;
    
    try {
      const files = fs.readdirSync(dirPath);
      
      for (const file of files) {
        const filePath = path.join(dirPath, file);
        const stats = fs.statSync(filePath);
        
        if (stats.isFile()) {
          totalSize += stats.size;
        } else if (stats.isDirectory() && !file.startsWith('.')) {
          totalSize += this.getDirectorySize(filePath);
        }
      }
    } catch (error) {
      return -1;
    }
    
    return totalSize;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  checkCriticalFiles() {
    console.log(`${colors.cyan}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...${colors.reset}`);
    
    for (const file of CONFIG.criticalFiles) {
      const exists = fs.existsSync(file);
      const status = exists ? 'OK' : 'MISSING';
      
      this.results.checks.push({
        type: 'critical_file',
        file: file,
        status: status
      });
      
      if (exists) {
        console.log(`  ‚úÖ ${path.basename(file)}: ${colors.green}OK${colors.reset}`);
      } else {
        console.log(`  ‚ùå ${path.basename(file)}: ${colors.red}MISSING${colors.reset}`);
        this.results.errors.push(`Critical file missing: ${file}`);
        this.results.overall = 'CRITICAL';
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≥–ª–∞–∑
  checkEyesSize() {
    console.log(`${colors.cyan}üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ offerspsp.com (–≥–ª–∞–∑–∞)...${colors.reset}`);
    
    const eyesPath = '/workspace';
    const sizeBytes = this.getDirectorySize(eyesPath);
    const sizeKB = Math.round(sizeBytes / 1024);
    
    this.results.checks.push({
      type: 'eyes_size',
      path: eyesPath,
      sizeKB: sizeKB,
      maxKB: CONFIG.maxSizeKB.eyes
    });
    
    if (sizeKB < CONFIG.maxSizeKB.eyes) {
      console.log(`  ‚úÖ –†–∞–∑–º–µ—Ä: ${sizeKB}KB < ${CONFIG.maxSizeKB.eyes}KB ${colors.green}OK${colors.reset}`);
    } else {
      console.log(`  ‚ö†Ô∏è –†–∞–∑–º–µ—Ä: ${sizeKB}KB > ${CONFIG.maxSizeKB.eyes}KB ${colors.yellow}WARNING${colors.reset}`);
      this.results.warnings.push(`Eyes repository too large: ${sizeKB}KB`);
      if (this.results.overall === 'HEALTHY') {
        this.results.overall = 'WARNING';
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—à–∞—Ä–∏–π
  checkHemispheres() {
    console.log(`${colors.cyan}üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—à–∞—Ä–∏–π...${colors.reset}`);
    
    for (const [name, statusFile] of Object.entries(CONFIG.hemispheres)) {
      if (fs.existsSync(statusFile)) {
        try {
          const status = JSON.parse(fs.readFileSync(statusFile, 'utf8'));
          
          this.results.checks.push({
            type: 'hemisphere',
            name: name,
            status: status.status,
            health: status.health
          });
          
          if (status.status === 'operational') {
            console.log(`  ‚úÖ ${name} –ø–æ–ª—É—à–∞—Ä–∏–µ: ${colors.green}OPERATIONAL${colors.reset}`);
          } else {
            console.log(`  ‚ö†Ô∏è ${name} –ø–æ–ª—É—à–∞—Ä–∏–µ: ${colors.yellow}${status.status}${colors.reset}`);
            this.results.warnings.push(`${name} hemisphere not operational`);
          }
        } catch (error) {
          console.log(`  ‚ùå ${name} –ø–æ–ª—É—à–∞—Ä–∏–µ: ${colors.red}ERROR${colors.reset}`);
          this.results.errors.push(`Cannot read ${name} hemisphere status`);
        }
      } else {
        console.log(`  ‚ö†Ô∏è ${name} –ø–æ–ª—É—à–∞—Ä–∏–µ: ${colors.yellow}NO STATUS FILE${colors.reset}`);
        this.results.warnings.push(`${name} hemisphere status file missing`);
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  checkDuplicates() {
    console.log(`${colors.cyan}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...${colors.reset}`);
    
    const patterns = ['*userPreferences*', '*memory*', '*autosave*'];
    let duplicatesFound = 0;
    
    // Simplified check - just count files
    const countFiles = (pattern) => {
      try {
        const { execSync } = require('child_process');
        const result = execSync(`find /workspace -name "${pattern}" -type f 2>/dev/null | wc -l`, 
                               { encoding: 'utf8' });
        return parseInt(result.trim());
      } catch {
        return 0;
      }
    };
    
    const userPrefCount = countFiles('*userPreferences*');
    if (userPrefCount > 1) {
      console.log(`  ‚ö†Ô∏è userPreferences: –Ω–∞–π–¥–µ–Ω–æ ${userPrefCount} —Ñ–∞–π–ª–æ–≤ ${colors.yellow}(–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1)${colors.reset}`);
      this.results.warnings.push(`Multiple userPreferences files: ${userPrefCount}`);
      duplicatesFound += userPrefCount - 1;
    } else {
      console.log(`  ‚úÖ userPreferences: ${colors.green}OK${colors.reset}`);
    }
    
    this.results.checks.push({
      type: 'duplicates',
      found: duplicatesFound
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
  generateReport() {
    console.log(`\n${colors.cyan}üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢${colors.reset}`);
    console.log('=================\n');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    let statusColor = colors.green;
    if (this.results.overall === 'WARNING') statusColor = colors.yellow;
    if (this.results.overall === 'CRITICAL') statusColor = colors.red;
    
    console.log(`–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${statusColor}${this.results.overall}${colors.reset}`);
    console.log(`–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${this.results.timestamp}`);
    
    if (this.results.warnings.length > 0) {
      console.log(`\n${colors.yellow}‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:${colors.reset}`);
      this.results.warnings.forEach(w => console.log(`  - ${w}`));
    }
    
    if (this.results.errors.length > 0) {
      console.log(`\n${colors.red}‚ùå –û—à–∏–±–∫–∏:${colors.reset}`);
      this.results.errors.forEach(e => console.log(`  - ${e}`));
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    const reportPath = '/workspace/health-check-report.json';
    fs.writeFileSync(reportPath, JSON.stringify(this.results, null, 2));
    console.log(`\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: ${reportPath}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º CURRENT-STATE.md
    this.updateCurrentState();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CURRENT-STATE.md
  updateCurrentState() {
    const statePath = '/workspace/CURRENT-STATE.md';
    
    if (fs.existsSync(statePath)) {
      let content = fs.readFileSync(statePath, 'utf8');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
      const healthEmoji = this.results.overall === 'HEALTHY' ? 'üü¢' : 
                          this.results.overall === 'WARNING' ? 'üü°' : 'üî¥';
      
      content = content.replace(
        /\*\*System Health:\*\* .+ /,
        `**System Health:** ${healthEmoji} ${this.results.overall}`
      );
      
      content = content.replace(
        /\*\*Last Update:\*\* .+/,
        `**Last Update:** ${new Date().toISOString().split('T')[0]} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è)`
      );
      
      fs.writeFileSync(statePath, content);
      console.log(`\n‚úÖ CURRENT-STATE.md –æ–±–Ω–æ–≤–ª—ë–Ω`);
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  run() {
    console.log(`${colors.cyan}üè• SUPER SYSTEM HEALTH CHECK v1.0${colors.reset}`);
    console.log('==================================\n');
    
    this.checkCriticalFiles();
    console.log('');
    
    this.checkEyesSize();
    console.log('');
    
    this.checkHemispheres();
    console.log('');
    
    this.checkDuplicates();
    
    this.generateReport();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if (this.results.overall === 'CRITICAL') {
      process.exit(1);
    } else if (this.results.overall === 'WARNING') {
      process.exit(0); // warning –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç
    } else {
      process.exit(0);
    }
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  const healthCheck = new SystemHealthCheck();
  healthCheck.run();
}

module.exports = SystemHealthCheck;