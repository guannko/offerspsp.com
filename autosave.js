#!/usr/bin/env node

/**
 * SUPER SYSTEM AUTOSAVE v2.0
 * –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class AutosaveSystem {
  constructor() {
    this.config = {
      intervals: {
        quick: 300,        // 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        checkpoint: 1800,  // 30 –º–∏–Ω—É—Ç
        cleanup: 86400    // 24 —á–∞—Å–∞
      },
      retention: {
        quick_saves: 10,
        checkpoints_days: 7,
        history_days: 30
      },
      paths: {
        autosave_dir: '/workspace/.autosave',
        current: '/workspace/.autosave/current.json',
        checkpoint: '/workspace/.autosave/checkpoint.json',
        history: '/workspace/.autosave/history',
        current_state: '/workspace/CURRENT-STATE.md',
        brain_index: '/workspace/BRAIN-INDEX.md'
      }
    };
    
    this.ensureDirectories();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  ensureDirectories() {
    const dirs = [
      this.config.paths.autosave_dir,
      this.config.paths.history,
      path.join(this.config.paths.history, this.getCurrentDate())
    ];
    
    dirs.forEach(dir => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
      }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
  getCurrentDate() {
    return new Date().toISOString().split('T')[0];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  getCurrentTime() {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, '0')}-${now.getMinutes().toString().padStart(2, '0')}`;
  }

  // –°–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
  collectSystemState() {
    const state = {
      timestamp: new Date().toISOString(),
      system: {
        health: 'operational',
        version: '1.0.0',
        uptime: process.uptime()
      },
      projects: {},
      hemispheres: {},
      memory: {},
      tasks: {},
      metrics: {}
    };

    // –ß–∏—Ç–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—à–∞—Ä–∏–π
    try {
      const leftHemisphere = path.join('/workspace/Annoris/hemisphere-status.json');
      if (fs.existsSync(leftHemisphere)) {
        state.hemispheres.left = JSON.parse(fs.readFileSync(leftHemisphere, 'utf8'));
      }
    } catch (e) {
      state.hemispheres.left = { status: 'unknown', error: e.message };
    }

    try {
      const rightHemisphere = path.join('/workspace/offerspsp-mvp/hemisphere-status.json');
      if (fs.existsSync(rightHemisphere)) {
        state.hemispheres.right = JSON.parse(fs.readFileSync(rightHemisphere, 'utf8'));
      }
    } catch (e) {
      state.hemispheres.right = { status: 'unknown', error: e.message };
    }

    // –ß–∏—Ç–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ CURRENT-STATE.md
    try {
      if (fs.existsSync(this.config.paths.current_state)) {
        const content = fs.readFileSync(this.config.paths.current_state, 'utf8');
        
        // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å OffersPSP
        if (content.includes('OffersPSP')) {
          state.projects.offerspsp = {
            status: 'production',
            priority: 1,
            tasks: this.extractTasks(content, 'OffersPSP')
          };
        }
        
        // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å Annoris
        if (content.includes('Annoris')) {
          state.projects.annoris = {
            status: 'development',
            priority: 2,
            tasks: this.extractTasks(content, 'Annoris')
          };
        }
      }
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CURRENT-STATE:', e.message);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    state.metrics = this.collectMetrics();

    // –î–æ–±–∞–≤–ª—è–µ–º Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    try {
      const gitStatus = execSync('cd /workspace && git status --short', { encoding: 'utf8' });
      const gitBranch = execSync('cd /workspace && git branch --show-current', { encoding: 'utf8' }).trim();
      const lastCommit = execSync('cd /workspace && git log -1 --oneline', { encoding: 'utf8' }).trim();
      
      state.git = {
        branch: gitBranch,
        modified_files: gitStatus.split('\n').filter(line => line.trim()).length,
        last_commit: lastCommit,
        has_changes: gitStatus.trim().length > 0
      };
    } catch (e) {
      state.git = { error: e.message };
    }

    return state;
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ —Ç–µ–∫—Å—Ç–∞
  extractTasks(content, project) {
    const tasks = [];
    const lines = content.split('\n');
    let inProject = false;
    
    for (const line of lines) {
      if (line.includes(project)) {
        inProject = true;
      } else if (inProject && line.startsWith('###')) {
        break;
      } else if (inProject && (line.includes('- [ ]') || line.includes('- [x]'))) {
        tasks.push({
          completed: line.includes('- [x]'),
          text: line.replace(/- \[.\]/, '').trim()
        });
      }
    }
    
    return tasks;
  }

  // –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
  collectMetrics() {
    const metrics = {
      autosave_count: 0,
      storage_used: '0MB',
      oldest_save: null
    };

    try {
      // –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
      const historyDir = path.join(this.config.paths.history, this.getCurrentDate());
      if (fs.existsSync(historyDir)) {
        metrics.autosave_count = fs.readdirSync(historyDir).length;
      }

      // –†–∞–∑–º–µ—Ä .autosave –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const size = execSync(`du -sh ${this.config.paths.autosave_dir} | cut -f1`, { encoding: 'utf8' }).trim();
      metrics.storage_used = size;

      // –°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      const historyDirs = fs.readdirSync(this.config.paths.history).sort();
      if (historyDirs.length > 0) {
        metrics.oldest_save = historyDirs[0];
      }
    } catch (e) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫:', e.message);
    }

    return metrics;
  }

  // Quick Save - –±—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  quickSave() {
    console.log('‚ö° Quick Save –∑–∞–ø—É—â–µ–Ω...');
    
    try {
      const state = this.collectSystemState();
      state.save_type = 'quick';
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ current.json
      fs.writeFileSync(
        this.config.paths.current,
        JSON.stringify(state, null, 2)
      );
      
      console.log(`‚úÖ Quick Save –∑–∞–≤–µ—Ä—à—ë–Ω: ${state.timestamp}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º CURRENT-STATE.md
      this.updateCurrentState(state);
      
      return state;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Quick Save:', error.message);
      return null;
    }
  }

  // Checkpoint - –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
  checkpoint() {
    console.log('üìç Checkpoint Save –∑–∞–ø—É—â–µ–Ω...');
    
    try {
      const state = this.collectSystemState();
      state.save_type = 'checkpoint';
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º checkpoint
      fs.writeFileSync(
        this.config.paths.checkpoint,
        JSON.stringify(state, null, 2)
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      const historyFile = path.join(
        this.config.paths.history,
        this.getCurrentDate(),
        `${this.getCurrentTime()}.json`
      );
      
      fs.writeFileSync(historyFile, JSON.stringify(state, null, 2));
      
      console.log(`‚úÖ Checkpoint —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${historyFile}`);
      
      // Git commit –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (state.git && state.git.has_changes) {
        this.gitCommit(state);
      }
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—à–∞—Ä–∏–π
      this.syncHemispheres(state);
      
      return state;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Checkpoint:', error.message);
      return null;
    }
  }

  // Cleanup - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
  cleanup() {
    console.log('üßπ Cleanup –∑–∞–ø—É—â–µ–Ω...');
    
    let cleaned = 0;
    
    try {
      const historyDirs = fs.readdirSync(this.config.paths.history);
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - this.config.retention.history_days);
      
      for (const dir of historyDirs) {
        const dirDate = new Date(dir);
        if (dirDate < cutoffDate) {
          const dirPath = path.join(this.config.paths.history, dir);
          fs.rmSync(dirPath, { recursive: true, force: true });
          console.log(`  üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
          cleaned++;
        }
      }
      
      console.log(`‚úÖ Cleanup –∑–∞–≤–µ—Ä—à—ë–Ω. –£–¥–∞–ª–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${cleaned}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Cleanup:', error.message);
    }
    
    return cleaned;
  }

  // Git commit
  gitCommit(state) {
    try {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ Git commit...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      execSync('cd /workspace && git add .autosave/ CURRENT-STATE.md', { stdio: 'pipe' });
      
      // –°–æ–∑–¥–∞—ë–º commit message
      const message = `üîÑ Autosave: ${state.timestamp.split('T')[0]} ${this.getCurrentTime()}
      
Projects: OffersPSP (${state.projects.offerspsp?.status || 'unknown'}), Annoris (${state.projects.annoris?.status || 'unknown'})
Hemispheres: Left (${state.hemispheres.left?.status || 'unknown'}), Right (${state.hemispheres.right?.status || 'unknown'})
Modified files: ${state.git.modified_files}`;
      
      // –î–µ–ª–∞–µ–º commit
      execSync(`cd /workspace && git commit -m "${message}"`, { stdio: 'pipe' });
      
      console.log('‚úÖ Git commit —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      if (!error.message.includes('nothing to commit')) {
        console.error('‚ö†Ô∏è Git commit –ø—Ä–æ–ø—É—â–µ–Ω:', error.message);
      }
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—à–∞—Ä–∏–π
  syncHemispheres(state) {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—à–∞—Ä–∏–π...');
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–∞–∂–¥–æ–º –ø–æ–ª—É—à–∞—Ä–∏–∏
      const syncData = {
        last_sync: state.timestamp,
        system_health: state.system.health,
        projects: state.projects,
        metrics: state.metrics
      };
      
      // –õ–µ–≤–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ (Annoris)
      const leftSync = path.join('/workspace/Annoris/.sync-state.json');
      fs.writeFileSync(leftSync, JSON.stringify(syncData, null, 2));
      
      // –ü—Ä–∞–≤–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ (offerspsp-mvp)
      const rightSync = path.join('/workspace/offerspsp-mvp/.sync-state.json');
      fs.writeFileSync(rightSync, JSON.stringify(syncData, null, 2));
      
      console.log('‚úÖ –ü–æ–ª—É—à–∞—Ä–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CURRENT-STATE.md
  updateCurrentState(state) {
    try {
      if (fs.existsSync(this.config.paths.current_state)) {
        let content = fs.readFileSync(this.config.paths.current_state, 'utf8');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º timestamp
        content = content.replace(
          /\*\*Last Update:\*\* .*/,
          `**Last Update:** ${state.timestamp.split('T')[0]} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è)`
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (state.metrics) {
          const metricsSection = `
### System:
- **Uptime:** ${Math.floor(state.system.uptime / 3600)} hours
- **Autosaves today:** ${state.metrics.autosave_count}
- **Storage used:** ${state.metrics.storage_used}`;
          
          // –ó–∞–º–µ–Ω—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –º–µ—Ç—Ä–∏–∫
          if (content.includes('### System:')) {
            content = content.replace(/### System:[\s\S]*?(?=##|$)/, metricsSection + '\n');
          }
        }
        
        fs.writeFileSync(this.config.paths.current_state, content);
      }
    } catch (error) {
      console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å CURRENT-STATE:', error.message);
    }
  }

  // Emergency save - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  emergencySave(reason = 'unknown') {
    console.log(`üö® EMERGENCY SAVE: ${reason}`);
    
    const state = this.collectSystemState();
    state.save_type = 'emergency';
    state.reason = reason;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ–∑–¥–µ
    const emergencyFile = path.join(
      this.config.paths.history,
      this.getCurrentDate(),
      `EMERGENCY-${this.getCurrentTime()}.json`
    );
    
    fs.writeFileSync(emergencyFile, JSON.stringify(state, null, 2));
    fs.writeFileSync(this.config.paths.current, JSON.stringify(state, null, 2));
    fs.writeFileSync(this.config.paths.checkpoint, JSON.stringify(state, null, 2));
    
    // –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π git commit
    this.gitCommit(state);
    
    console.log(`‚úÖ Emergency save –∑–∞–≤–µ—Ä—à—ë–Ω: ${emergencyFile}`);
    return state;
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  restore() {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ autosave...');
    
    try {
      // –ü—Ä–æ–±—É–µ–º checkpoint
      if (fs.existsSync(this.config.paths.checkpoint)) {
        const checkpoint = JSON.parse(fs.readFileSync(this.config.paths.checkpoint, 'utf8'));
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ checkpoint: ${checkpoint.timestamp}`);
        return checkpoint;
      }
      
      // –ü—Ä–æ–±—É–µ–º current
      if (fs.existsSync(this.config.paths.current)) {
        const current = JSON.parse(fs.readFileSync(this.config.paths.current, 'utf8'));
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ current: ${current.timestamp}`);
        return current;
      }
      
      console.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
      return null;
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ autosave
  stats() {
    const stats = {
      current_exists: fs.existsSync(this.config.paths.current),
      checkpoint_exists: fs.existsSync(this.config.paths.checkpoint),
      history_days: 0,
      total_saves: 0,
      storage_used: '0MB'
    };
    
    try {
      // –ü–æ–¥—Å—á—ë—Ç –¥–Ω–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
      if (fs.existsSync(this.config.paths.history)) {
        const dirs = fs.readdirSync(this.config.paths.history);
        stats.history_days = dirs.length;
        
        // –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
        for (const dir of dirs) {
          const files = fs.readdirSync(path.join(this.config.paths.history, dir));
          stats.total_saves += files.length;
        }
      }
      
      // –†–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      const size = execSync(`du -sh ${this.config.paths.autosave_dir} 2>/dev/null | cut -f1`, 
                           { encoding: 'utf8' }).trim();
      stats.storage_used = size || '0MB';
      
    } catch (e) {
      // Ignore errors
    }
    
    return stats;
  }
}

// CLI interface
if (require.main === module) {
  const autosave = new AutosaveSystem();
  const command = process.argv[2] || 'help';
  
  switch (command) {
    case 'quick':
      autosave.quickSave();
      break;
      
    case 'checkpoint':
      autosave.checkpoint();
      break;
      
    case 'cleanup':
      autosave.cleanup();
      break;
      
    case 'emergency':
      const reason = process.argv[3] || 'manual trigger';
      autosave.emergencySave(reason);
      break;
      
    case 'restore':
      const restored = autosave.restore();
      if (restored) {
        console.log(JSON.stringify(restored, null, 2));
      }
      break;
      
    case 'stats':
      const stats = autosave.stats();
      console.log('üìä Autosave Statistics:');
      console.log(JSON.stringify(stats, null, 2));
      break;
      
    case 'help':
    default:
      console.log(`
üîÑ SUPER SYSTEM AUTOSAVE v2.0

Usage: node autosave.js [command]

Commands:
  quick       - Quick save (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
  checkpoint  - Checkpoint save (—Å git commit)
  cleanup     - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
  emergency   - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  restore     - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  stats       - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

Examples:
  node autosave.js quick
  node autosave.js checkpoint
  node autosave.js emergency "critical error"
`);
  }
}

module.exports = AutosaveSystem;